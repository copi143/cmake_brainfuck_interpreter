# vimtcompile:[ -d build ] && rm -rf build; cmake -B build
cmake_minimum_required(VERSION 3.31)
project(BrainfuckInterpreter)

set(INPUT_FILE
    test.bf
    CACHE FILEPATH "Input file path")
set(STDIN_FILE
    program_in
    CACHE FILEPATH "Path of standard input for the program")

file(READ "${INPUT_FILE}" SRC)
file(READ "${STDIN_FILE}" STDIN)
string(LENGTH "${STDIN}" STDIN_LEN)
set(STDIN_PTR 0)

set(STDOUT_BUF "")
function(putchar char)
  if(char STREQUAL "\n")
    message("${STDOUT_BUF}")
    set(STDOUT_BUF
        ""
        PARENT_SCOPE)
  else()
    set(STDOUT_BUF
        "${STDOUT_BUF}${char}"
        PARENT_SCOPE)
  endif()
endfunction()

set(ascii_string " ")
foreach(i RANGE 1 255)
  string(ASCII ${i} i)
  string(APPEND ascii_string ${i})
endforeach()

function(getchar outvar)
  if(STDIN_PTR LESS STDIN_LEN)
    string(SUBSTRING "${STDIN}" ${STDIN_PTR} 1 ch)
    string(FIND "${ascii_string}" "${ch}" ch)
    set(${outvar}
        ${ch}
        PARENT_SCOPE)
    math(EXPR ret "${STDIN_PTR} + 1")
    set(STDIN_PTR
        ${ret}
        PARENT_SCOPE)
  else()
    set(${outvar}
        0
        PARENT_SCOPE)
  endif()
endfunction()

function(flush)
  if(NOT STDOUT_BUF STREQUAL "")
    message("${STDOUT_BUF}")
    set(STDOUT_BUF
        ""
        PARENT_SCOPE)
  endif()
endfunction()

string(LENGTH "${SRC}" SRC_LEN)
set(PROGRAM_COUNTER 0)
set(POINTER 0)
set(RAM_FORWARD 0 0 0 0) # 从 0 开始向后的内存
set(RAM_BACKWARD 0 0 0 0) # 从 -1 开始向前的内存
set(RAM_IS_FORWARD ON)
list(LENGTH RAM_FORWARD RAM_FORWARD_CAP)
list(LENGTH RAM_BACKWARD RAM_BACKWARD_CAP)

while(${PROGRAM_COUNTER} LESS ${SRC_LEN})
  string(SUBSTRING "${SRC}" ${PROGRAM_COUNTER} 1 ch)
  if(ch STREQUAL "+")
    if(RAM_IS_FORWARD)
      list(GET RAM_FORWARD ${POINTER} value)
      list(REMOVE_AT RAM_FORWARD ${POINTER})
      math(EXPR value "(${value} + 1) % 256")
      list(INSERT RAM_FORWARD ${POINTER} ${value})
    else()
      list(GET RAM_BACKWARD ${POINTER} value)
      list(REMOVE_AT RAM_BACKWARD ${POINTER})
      math(EXPR value "(${value} + 1) % 256")
      list(INSERT RAM_BACKWARD ${POINTER} ${value})
    endif()
  elseif(ch STREQUAL "-")
    if(RAM_IS_FORWARD)
      list(GET RAM_FORWARD ${POINTER} value)
      list(REMOVE_AT RAM_FORWARD ${POINTER})
      math(EXPR value "(${value} + 255) % 256")
      list(INSERT RAM_FORWARD ${POINTER} ${value})
    else()
      list(GET RAM_BACKWARD ${POINTER} value)
      list(REMOVE_AT RAM_BACKWARD ${POINTER})
      math(EXPR value "(${value} + 255) % 256")
      list(INSERT RAM_BACKWARD ${POINTER} ${value})
    endif()
  elseif(ch STREQUAL "<")
    math(EXPR POINTER "${POINTER} - 1")
    if(POINTER LESS 0)
      math(EXPR POINTER "-${POINTER} - 1")
      if(RAM_IS_FORWARD)
        set(RAM_IS_FORWARD OFF)
        while(RAM_BACKWARD_CAP LESS_EQUAL ${POINTER})
          list(APPEND RAM_BACKWARD 0)
          list(LENGTH RAM_BACKWARD RAM_BACKWARD_CAP)
        endwhile()
      else()
        set(RAM_IS_FORWARD ON)
        while(RAM_FORWARD_CAP LESS_EQUAL ${POINTER})
          list(APPEND RAM_FORWARD 0)
          list(LENGTH RAM_FORWARD RAM_FORWARD_CAP)
        endwhile()
      endif()
    endif()
  elseif(ch STREQUAL ">")
    math(EXPR POINTER "${POINTER} + 1")
    if(RAM_IS_FORWARD)
      while(RAM_FORWARD_CAP LESS_EQUAL ${POINTER})
        list(APPEND RAM_FORWARD 0)
        list(LENGTH RAM_FORWARD RAM_FORWARD_CAP)
      endwhile()
    else()
      while(RAM_BACKWARD_CAP LESS_EQUAL ${POINTER})
        list(APPEND RAM_BACKWARD 0)
        list(LENGTH RAM_BACKWARD RAM_BACKWARD_CAP)
      endwhile()
    endif()
  elseif(ch STREQUAL "[")
    if(RAM_IS_FORWARD)
      list(GET RAM_FORWARD ${POINTER} ret)
    else()
      list(GET RAM_BACKWARD ${POINTER} ret)
    endif()
    if("${ret}" EQUAL 0)
      set(left_count 0)
      set(found_match OFF)
      while(PROGRAM_COUNTER LESS SRC_LEN)
        string(SUBSTRING "${SRC}" ${PROGRAM_COUNTER} 1 ch)
        if(ch STREQUAL "[")
          math(EXPR left_count "${left_count}+1")
        elseif(ch STREQUAL "]")
          # Compare to 1 because the initial bracket will cause left_count to increase
          if(left_count EQUAL 1)
            set(found_match ON)
            break()
          else()
            math(EXPR left_count "${left_count}-1")
          endif()
        endif()
        math(EXPR PROGRAM_COUNTER "${PROGRAM_COUNTER}+1")
      endwhile()
      if(NOT found_match)
        message(FATAL_ERROR "Unbalanced left bracket found in source")
      endif()
    endif()
  elseif(ch STREQUAL "]")
    if(RAM_IS_FORWARD)
      list(GET RAM_FORWARD ${POINTER} ret)
    else()
      list(GET RAM_BACKWARD ${POINTER} ret)
    endif()
    if(NOT "${ret}" EQUAL 0)
      set(right_count 0)
      set(found_match OFF)
      while(PROGRAM_COUNTER GREATER_EQUAL 0)
        string(SUBSTRING "${SRC}" ${PROGRAM_COUNTER} 1 ch)
        if(ch STREQUAL "]")
          math(EXPR right_count "${right_count}+1")
        elseif(ch STREQUAL "[")
          # Compare to 1 because the initial bracket will cause left_count to increase
          if(right_count EQUAL 1)
            set(found_match ON)
            break()
          else()
            math(EXPR right_count "${right_count}-1")
          endif()
        endif()
        math(EXPR PROGRAM_COUNTER "${PROGRAM_COUNTER}-1")
      endwhile()
      if(NOT found_match)
        message(FATAL_ERROR "Unbalanced right bracket found in source")
      endif()
    endif()
  elseif(ch STREQUAL ".")
    if(RAM_IS_FORWARD)
      list(GET RAM_FORWARD ${POINTER} ret)
    else()
      list(GET RAM_BACKWARD ${POINTER} ret)
    endif()
    string(ASCII ${ret} ret)
    putchar(${ret})
  elseif(ch STREQUAL ",")
    getchar(ret)
    if(RAM_IS_FORWARD)
      list(REMOVE_AT RAM_FORWARD ${POINTER})
      list(INSERT RAM_FORWARD ${POINTER} ${ret})
    else()
      list(REMOVE_AT RAM_BACKWARD ${POINTER})
      list(INSERT RAM_BACKWARD ${POINTER} ${ret})
    endif()
  endif()
  math(EXPR PROGRAM_COUNTER "${PROGRAM_COUNTER} + 1")
endwhile()

flush()
